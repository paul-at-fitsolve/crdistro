<?php
/**
 * @file
 * Definition of the 'panels_grid_styles' panel style.
 *
 * Enables Bootstrap 3 column classes to be attached to 
 * panel regions and panes.
 *
 */


/**
 * Implements hook_ctools_plugin_directory().
 */
function crl2_panel_styles_ctools_plugin_directory($owner, $plugin_type) {
  // Register our plugins directory with cTools
  // so panels can pick up our .inc files
  if ($owner == 'panels') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_theme().
 *
 * Enables the for 'pane_settings_form' to be rendered
 * by our custom template file.
 * 
 * We theme the form with expandable sections and with 
 * the breakpoint select dropdowns spanning four columns.
 *
 * Presents a better UI for page builders.
 * 
 */
function crl2_panel_styles_theme($existing, $type, $theme, $path){

  return array(
    'pane__settings_form' => array(
      'render element' => 'form',
      'template' => 'pane--settings-form',
      'path' => drupal_get_path('module', 'crl2_panel_styles') . '/plugins/styles/pane',
    ),
  );

}

/**
 * Implement function hook_form_BASE_FORM_ID_alter
 *
 * Panels module comes with a set of default style implementations. These display in the
 * region and pane style settings.
 * 
 * But we want only our own region styles to display in the Panels region 
 * and pane style list.
 *
 * We simply unset the default region and pane style settings here.
 * 
 * Doing this prevents a developer from creating pages with regions or 
 * panes that don't adhere to our responsive grid.
 * 
 */
function crl2_panel_styles_form_panels_edit_style_type_form_alter(&$form, &$form_state, $form_id) {

  // Define an array of option keys to unset.
  $remove_options = array(
    // These cover those default styles provided by
    // Panels module that we want to remove.
    '-1',
    'default_style',
    'list',
    'naked',
    'rounded_corners',
    'block',
    );

  // Unset unrequired options from the form
  foreach($remove_options as $remove_option) {
    unset($form['style']['#options'][$remove_option]);
  }

}

/*
 * Alter new panes to set default pane style settings
 * Implements hook_panels_new_pane_alter
 */
function crl2_panel_styles_panels_new_pane_alter(&$pane) {
  $pane->style['style'] = 'pane';
  $pane->style['settings'] = array(
    'use_columns' => 1,
    'columns' => array(
      'xs' => 'col_xs_12',
      'sm' => 'inherit',
      'md' => 'inherit',
      'lg' => 'inherit',
    ),
    'use_offset' => 0,
    'use_push' => 0,
    'use_pull' => 0,
    'use_visibility' => 0,
  );
}

/*
 * Implements HOOK_preprocess_panels_pane
 *
 * Preprocess panel panes so we can add data attribute key value
 * pairs to pane wrappers.
 * 
 */
function crl2_panel_styles_preprocess_panels_pane(&$vars) {

  if(!$vars || !isset($vars['pane'])) return;

  // Check if data attributes are set for this pane.
  if(is_object($vars['pane']) && isset($vars['pane']->style['style']) && $vars['pane']->style['style'] === 'pane' && isset($vars['pane']->style['settings']['use_data_attributes']) && is_array($vars['pane']->style['settings']['data_attributes'])) {

    // Loop through each data attribute set.
    foreach($vars['pane']->style['settings']['data_attributes']['data_attribute'] as $data_attribute){
      // Check we have a data attribute name and value set.
      // We have to check for != '' here as panels saves unset data attribute values as empty strings.
      if(isset($data_attribute['key']) && isset($data_attribute['value']) && $data_attribute['key'] != '' && $data_attribute['value'] != ''){
          $vars['attributes_array'][$data_attribute['key']] = $data_attribute['value'];
      }
    }

  }  
}

/**
 * Implements panels_display_save.
 *
 * If a panels page is saved but the Dev hasn't gone into the region/pane
 * style settings form to configure the column settings, we
 * need to add some sensible defaults here.
 *
 * On panel save, we loop through the regions. If no region and/or
 * pane column settings have been configured, we configure them here.
 *
 * The defaults we add, if required, are section and default container
 * for the region, and col-sm-12 for the panes.
 *
 * Note: hook_panels_pane_save would be better but it doesn't exist!
 *
 * PB: 23/06 This function isn't working as expected.
 *
 * I think there may be some weird Panel page caching issue somewhere.
 *
 * Going to comment this out for now and come back to it later, if we need to.
 */
/*
function crl2_panel_styles_panels_display_save($display){
  
  // Add default styles to any panes that haven't had
  // their pane styles set
  foreach ($display->panels as $id => $panes) {

    // Loop through the panes
    foreach ((array) $panes as $pid) {

      // Load each pane
      $pane = $display->content[$pid];

      // If the pane styles are empty, add some defaults for the grid
      if(empty($pane->style)) {
        $pane->style = array(
          'style' => 'pane',
          'settings' => array(
            'use_columns' => 1,
            'columns' => array(
              'xs' => 'col_xs_12',
            ),
            'use_offset' => 0,
            'use_push' => 0,
            'use_pull' => 0,
          ),
        );

        // and save the pane
        drupal_write_record('panels_pane', $pane, is_numeric($pid) ? array('pid') : array());        

      }
    }

    // Now, inspect the regions that contain panes.
    // Regions being used should have a region style of either
    // full-width or default.
    // If region styles are NOT set, we set theme here
    // We already have the region name in $pid so we're good to go

    if (!empty($display->panels[$id]) && !isset($display->panel_settings[$id]['style'])) {

      // Define the region as a default container
      $region_style_settings = array(
        $id => array(
          'section_full_width' => 0,
          'classes_section' => '',
          'classes_container' => '',
          'classes_row' => '',
          ),
      );
      $display->panel_settings['style_settings'] = $region_style_settings;

      // Ensure the panel style is set to 'Section'
      $display->panel_settings[$id]['style'] = 'section';  

      // Save the shizzle
      $update = (isset($display->did) && is_numeric($display->did)) ? array('did') : array();
      drupal_write_record('panels_display', $display, $update);

    }
  }
}
*/
